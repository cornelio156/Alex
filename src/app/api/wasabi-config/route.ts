import { NextResponse } from 'next/server'
import { isWasabiConfigured } from '@/lib/wasabi'

export async function GET() {
  try {
    // Log das vari√°veis de ambiente para debug
    console.log('üîç Verificando vari√°veis de ambiente do Wasabi:')
    console.log('WASABI_ACCESS_KEY_ID:', process.env.WASABI_ACCESS_KEY_ID ? '‚úÖ Definida' : '‚ùå N√£o definida')
    console.log('WASABI_SECRET_ACCESS_KEY:', process.env.WASABI_SECRET_ACCESS_KEY ? '‚úÖ Definida' : '‚ùå N√£o definida')
    console.log('WASABI_BUCKET_NAME:', process.env.WASABI_BUCKET_NAME || '‚ùå N√£o definida')
    console.log('WASABI_METADATA_BUCKET_NAME:', process.env.WASABI_METADATA_BUCKET_NAME || '‚ùå N√£o definida')
    console.log('WASABI_REGION:', process.env.WASABI_REGION || '‚ùå N√£o definida')
    console.log('WASABI_ENDPOINT:', process.env.WASABI_ENDPOINT || '‚ùå N√£o definida')
    
    const configured = isWasabiConfigured()
    console.log('üîç Resultado da verifica√ß√£o:', configured ? '‚úÖ Configurado' : '‚ùå N√£o configurado')
    
    return NextResponse.json({ 
      isConfigured: configured,
      message: configured ? 'Wasabi est√° configurado' : 'Wasabi n√£o est√° configurado'
    })
  } catch (error) {
    console.error('Erro ao verificar configura√ß√£o do Wasabi:', error)
    return NextResponse.json({ 
      isConfigured: false,
      message: 'Erro ao verificar configura√ß√£o do Wasabi'
    }, { status: 500 })
  }
}
